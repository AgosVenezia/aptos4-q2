{"ast":null,"code":"import { tryCatch } from '../../lib/prelude.js';\nimport { isOperationDefinitionNode } from '../lib/graphql.js';\n/**\n * Refactored imports from `graphql` to be more specific, this helps import only the required files (100KiB)\n * instead of the entire package (greater than 500KiB) where tree-shaking is not supported.\n * @see https://github.com/jasonkuhrt/graphql-request/pull/543\n */\nimport { OperationTypeNode } from 'graphql';\nimport { parse } from 'graphql';\nimport { print } from 'graphql';\n/**\n * helpers\n */\nconst extractOperationName = document => {\n  let operationName = undefined;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n  if (defs.length === 1) {\n    operationName = defs[0].name?.value;\n  }\n  return operationName;\n};\nconst extractIsMutation = document => {\n  let isMutation = false;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n  if (defs.length === 1) {\n    isMutation = defs[0].operation === OperationTypeNode.MUTATION;\n  }\n  return isMutation;\n};\nexport const analyzeDocument = (document, excludeOperationName) => {\n  const expression = typeof document === `string` ? document : print(document);\n  let isMutation = false;\n  let operationName = undefined;\n  if (excludeOperationName) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n  const docNode = tryCatch(() => typeof document === `string` ? parse(document) : document);\n  if (docNode instanceof Error) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n  operationName = extractOperationName(docNode);\n  isMutation = extractIsMutation(docNode);\n  return {\n    expression,\n    operationName,\n    isMutation\n  };\n};\n//# sourceMappingURL=analyzeDocument.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
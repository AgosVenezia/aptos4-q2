{"ast":null,"code":"import { c as a } from \"./chunk-4JXB6V5O.mjs\";\nimport e from \"eventemitter3\";\nvar i = class extends e {\n  constructor(t) {\n    super(), this.config = t;\n  }\n  start(t) {\n    let {\n      sender: n\n    } = t;\n    this.account = n, this.transactionWorker = new a(this.config, n), this.transactionWorker.start(), this.registerToEvents();\n  }\n  push(t) {\n    let {\n      data: n,\n      options: o\n    } = t;\n    for (let r of n) this.transactionWorker.push(r, o);\n  }\n  registerToEvents() {\n    this.transactionWorker.on(\"transactionSent\", async t => {\n      this.emit(\"transactionSent\", t);\n    }), this.transactionWorker.on(\"transactionSendFailed\", async t => {\n      this.emit(\"transactionSendFailed\", t);\n    }), this.transactionWorker.on(\"transactionExecuted\", async t => {\n      this.emit(\"transactionExecuted\", t);\n    }), this.transactionWorker.on(\"transactionExecutionFailed\", async t => {\n      this.emit(\"transactionExecutionFailed\", t);\n    }), this.transactionWorker.on(\"executionFinish\", async t => {\n      this.emit(\"executionFinish\", t);\n    });\n  }\n  forSingleAccount(t) {\n    try {\n      let {\n        sender: n,\n        data: o,\n        options: r\n      } = t;\n      this.start({\n        sender: n\n      }), this.push({\n        data: o,\n        options: r\n      });\n    } catch (n) {\n      throw new Error(`failed to submit transactions with error: ${n}`);\n    }\n  }\n};\nexport { i as a };\n//# sourceMappingURL=chunk-IAVI3H4V.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
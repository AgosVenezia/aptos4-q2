{"ast":null,"code":"import { a, c } from \"./chunk-4VU2ABLU.mjs\";\nimport { a as u } from \"./chunk-BOWPP6YG.mjs\";\nimport { i as o, j as l } from \"./chunk-FTZGP6XW.mjs\";\nimport { b as n, d as s } from \"./chunk-P3J54CQG.mjs\";\nimport { a as f } from \"./chunk-IBLZ6MZU.mjs\";\nimport { b as p } from \"./chunk-4OV7QU2U.mjs\";\nimport { a as b } from \"./chunk-PRZ7AIGA.mjs\";\nvar K = class r extends p {\n    constructor(e) {\n      if (super(), this.publicKey = e, e instanceof n) this.variant = 0;else if (e instanceof a) this.variant = 1;else if (e instanceof o) this.variant = 3;else if (e instanceof u) this.variant = 4;else throw new Error(\"Unsupported public key type\");\n    }\n    verifySignature(e) {\n      let {\n        message: t,\n        signature: i\n      } = e;\n      return y.isInstance(i) ? this.publicKey.verifySignature({\n        message: t,\n        signature: i.signature\n      }) : !1;\n    }\n    authKey() {\n      return b.fromSchemeAndBytes({\n        scheme: 2,\n        input: this.toUint8Array()\n      });\n    }\n    toUint8Array() {\n      return this.bcsToBytes();\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.publicKey.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32(),\n        i;\n      switch (t) {\n        case 0:\n          i = n.deserialize(e);\n          break;\n        case 1:\n          i = a.deserialize(e);\n          break;\n        case 3:\n          i = o.deserialize(e);\n          break;\n        case 4:\n          i = u.deserialize(e);\n          break;\n        default:\n          throw new Error(`Unknown variant index for AnyPublicKey: ${t}`);\n      }\n      return new r(i);\n    }\n    static isPublicKey(e) {\n      return e instanceof r;\n    }\n    isEd25519() {\n      return this.publicKey instanceof n;\n    }\n    isSecp256k1PublicKey() {\n      return this.publicKey instanceof a;\n    }\n    static isInstance(e) {\n      return \"publicKey\" in e && \"variant\" in e;\n    }\n  },\n  y = class r extends f {\n    constructor(e) {\n      if (super(), this.signature = e, e instanceof s) this.variant = 0;else if (e instanceof c) this.variant = 1;else if (e instanceof l) this.variant = 3;else throw new Error(\"Unsupported signature type\");\n    }\n    toUint8Array() {\n      return console.warn(\"[Aptos SDK] Calls to AnySignature.toUint8Array() will soon return the underlying signature bytes. Use AnySignature.bcsToBytes() instead.\"), this.bcsToBytes();\n    }\n    serialize(e) {\n      e.serializeU32AsUleb128(this.variant), this.signature.serialize(e);\n    }\n    static deserialize(e) {\n      let t = e.deserializeUleb128AsU32(),\n        i;\n      switch (t) {\n        case 0:\n          i = s.deserialize(e);\n          break;\n        case 1:\n          i = c.deserialize(e);\n          break;\n        case 3:\n          i = l.deserialize(e);\n          break;\n        default:\n          throw new Error(`Unknown variant index for AnySignature: ${t}`);\n      }\n      return new r(i);\n    }\n    static isInstance(e) {\n      return \"signature\" in e && typeof e.signature == \"object\" && e.signature !== null && \"toUint8Array\" in e.signature;\n    }\n  };\nexport { K as a, y as b };\n//# sourceMappingURL=chunk-TPJLAYW6.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
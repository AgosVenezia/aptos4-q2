{"ast":null,"code":"import { b as h, d as l } from \"./chunk-P3J54CQG.mjs\";\nimport { a as p } from \"./chunk-IBLZ6MZU.mjs\";\nimport { b as E } from \"./chunk-4OV7QU2U.mjs\";\nimport { a as g } from \"./chunk-PRZ7AIGA.mjs\";\nvar o = class o extends E {\n  constructor(r) {\n    super();\n    let {\n      publicKeys: e,\n      threshold: t\n    } = r;\n    if (e.length > o.MAX_KEYS || e.length < o.MIN_KEYS) throw new Error(`Must have between ${o.MIN_KEYS} and ${o.MAX_KEYS} public keys, inclusive`);\n    if (t < o.MIN_THRESHOLD || t > e.length) throw new Error(`Threshold must be between ${o.MIN_THRESHOLD} and ${e.length}, inclusive`);\n    this.publicKeys = e, this.threshold = t;\n  }\n  verifySignature(r) {\n    let {\n      message: e,\n      signature: t\n    } = r;\n    if (!(t instanceof y)) return !1;\n    let s = [];\n    for (let i = 0; i < 4; i += 1) for (let n = 0; n < 8; n += 1) if ((t.bitmap[i] & 1 << 7 - n) !== 0) {\n      let u = i * 8 + n;\n      s.push(u);\n    }\n    if (s.length !== t.signatures.length) throw new Error(\"Bitmap and signatures length mismatch\");\n    if (s.length < this.threshold) throw new Error(\"Not enough signatures\");\n    for (let i = 0; i < s.length; i += 1) if (!this.publicKeys[s[i]].verifySignature({\n      message: e,\n      signature: t.signatures[i]\n    })) return !1;\n    return !0;\n  }\n  authKey() {\n    return g.fromSchemeAndBytes({\n      scheme: 1,\n      input: this.toUint8Array()\n    });\n  }\n  toUint8Array() {\n    let r = new Uint8Array(this.publicKeys.length * h.LENGTH + 1);\n    return this.publicKeys.forEach((e, t) => {\n      r.set(e.toUint8Array(), t * h.LENGTH);\n    }), r[this.publicKeys.length * h.LENGTH] = this.threshold, r;\n  }\n  serialize(r) {\n    r.serializeBytes(this.toUint8Array());\n  }\n  static deserialize(r) {\n    let e = r.deserializeBytes(),\n      t = e[e.length - 1],\n      s = [];\n    for (let i = 0; i < e.length - 1; i += h.LENGTH) {\n      let n = i;\n      s.push(new h(e.subarray(n, n + h.LENGTH)));\n    }\n    return new o({\n      publicKeys: s,\n      threshold: t\n    });\n  }\n};\no.MAX_KEYS = 32, o.MIN_KEYS = 2, o.MIN_THRESHOLD = 1;\nvar d = o,\n  a = class a extends p {\n    constructor(r) {\n      super();\n      let {\n        signatures: e,\n        bitmap: t\n      } = r;\n      if (e.length > a.MAX_SIGNATURES_SUPPORTED) throw new Error(`The number of signatures cannot be greater than ${a.MAX_SIGNATURES_SUPPORTED}`);\n      if (this.signatures = e, !(t instanceof Uint8Array)) this.bitmap = a.createBitmap({\n        bits: t\n      });else {\n        if (t.length !== a.BITMAP_LEN) throw new Error(`\"bitmap\" length should be ${a.BITMAP_LEN}`);\n        this.bitmap = t;\n      }\n    }\n    toUint8Array() {\n      let r = new Uint8Array(this.signatures.length * l.LENGTH + a.BITMAP_LEN);\n      return this.signatures.forEach((e, t) => {\n        r.set(e.toUint8Array(), t * l.LENGTH);\n      }), r.set(this.bitmap, this.signatures.length * l.LENGTH), r;\n    }\n    serialize(r) {\n      r.serializeBytes(this.toUint8Array());\n    }\n    static deserialize(r) {\n      let e = r.deserializeBytes(),\n        t = e.subarray(e.length - 4),\n        s = [];\n      for (let i = 0; i < e.length - t.length; i += l.LENGTH) {\n        let n = i;\n        s.push(new l(e.subarray(n, n + l.LENGTH)));\n      }\n      return new a({\n        signatures: s,\n        bitmap: t\n      });\n    }\n    static createBitmap(r) {\n      let {\n          bits: e\n        } = r,\n        t = 128,\n        s = new Uint8Array([0, 0, 0, 0]),\n        i = new Set();\n      return e.forEach((n, c) => {\n        if (n >= a.MAX_SIGNATURES_SUPPORTED) throw new Error(`Cannot have a signature larger than ${a.MAX_SIGNATURES_SUPPORTED - 1}.`);\n        if (i.has(n)) throw new Error(\"Duplicate bits detected.\");\n        if (c > 0 && n <= e[c - 1]) throw new Error(\"The bits need to be sorted in ascending order.\");\n        i.add(n);\n        let u = Math.floor(n / 8),\n          b = s[u];\n        b |= t >> n % 8, s[u] = b;\n      }), s;\n    }\n  };\na.MAX_SIGNATURES_SUPPORTED = 32, a.BITMAP_LEN = 4;\nvar y = a;\nexport { d as a, y as b };\n//# sourceMappingURL=chunk-CC7VOPYH.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
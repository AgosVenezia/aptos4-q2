{"ast":null,"code":"// src/serialization/bcsSerialization.ts\nimport { Deserializer, Hex } from \"@aptos-labs/ts-sdk\";\nimport { BCS } from \"aptos\";\nfunction isBcsSerializableV1(value) {\n  return value?.serialize !== void 0;\n}\nfunction isBcsSerializableV2(value) {\n  return value?.serialize !== void 0 && value?.bcsToBytes !== void 0 && value?.bcsToHex !== void 0;\n}\nfunction isBcsSerializable(value) {\n  return isBcsSerializableV1(value) || isBcsSerializableV2(value);\n}\nfunction bcsSerialize(serializable) {\n  if (isBcsSerializableV2(serializable)) {\n    return serializable.bcsToHex().toString();\n  }\n  const serializedValueBytes = BCS.bcsToBytes(serializable);\n  return Hex.fromHexInput(serializedValueBytes).toString();\n}\nfunction bcsDeserialize(deserializableClass, serializedValue) {\n  const serializedValueBytes = Hex.fromHexString(serializedValue).toUint8Array();\n  const deserializer = new Deserializer(serializedValueBytes);\n  return deserializableClass.deserialize(deserializer);\n}\n\n// src/serialization/jsonPayload.ts\nimport { Hex as Hex2 } from \"@aptos-labs/ts-sdk\";\n\n// src/serialization/error.ts\nvar UnexpectedValueError = class _UnexpectedValueError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"UnexpectedValueError\";\n    Object.setPrototypeOf(this, _UnexpectedValueError.prototype);\n  }\n};\n\n// src/serialization/jsonPayload.ts\nfunction isSerializedUint8Array(arg) {\n  return arg?.type === \"Uint8Array\" && typeof arg?.value === \"string\";\n}\nfunction serializeEntryFunctionArg(arg) {\n  if (arg instanceof Uint8Array) {\n    return {\n      type: \"Uint8Array\",\n      value: Hex2.fromHexInput(arg).toString()\n    };\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(serializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction deserializeEntryFunctionArg(arg) {\n  if (isSerializedUint8Array(arg)) {\n    return Hex2.fromHexInput(arg.value).toUint8Array();\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(deserializeEntryFunctionArg);\n  }\n  return arg;\n}\nfunction serializeEntryFunctionPayload(payload) {\n  const normalizedArgs = payload.arguments.map(serializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: normalizedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction deserializeEntryFunctionPayload(payload) {\n  const deserializedArgs = payload.arguments.map(deserializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: deserializedArgs,\n    type: \"entry_function_payload\"\n  };\n}\nfunction serializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return serializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? serializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return {\n      ...payload,\n      transaction_payload: innerPayload\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeJsonTransactionPayload(payload) {\n  if (payload.type === \"entry_function_payload\" || payload.type === void 0) {\n    return deserializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === \"multisig_payload\") {\n    const innerPayload = payload.transaction_payload !== void 0 ? deserializeEntryFunctionPayload(payload.transaction_payload) : void 0;\n    return {\n      ...payload,\n      transaction_payload: innerPayload\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/rawTxn.ts\nimport { RawTransaction, RawTransactionWithData } from \"@aptos-labs/ts-sdk\";\nfunction serializeRawTransaction(rawTxn) {\n  const value = bcsSerialize(rawTxn);\n  if (\"fee_payer_address\" in rawTxn) {\n    return {\n      type: \"fee_payer_raw_txn\",\n      value\n    };\n  }\n  if (\"secondary_signer_addresses\" in rawTxn) {\n    return {\n      type: \"multi_agent_raw_txn\",\n      value\n    };\n  }\n  if (\"chain_id\" in rawTxn) {\n    return {\n      type: \"raw_txn\",\n      value\n    };\n  }\n  throw new UnexpectedValueError(\"Invalid raw transaction type\");\n}\nfunction deserializeRawTransaction(serialized) {\n  switch (serialized.type) {\n    case \"raw_txn\":\n      return bcsDeserialize(RawTransaction, serialized.value);\n    case \"fee_payer_raw_txn\":\n      return bcsDeserialize(RawTransactionWithData, serialized.value);\n    case \"multi_agent_raw_txn\":\n      return bcsDeserialize(RawTransactionWithData, serialized.value);\n    default:\n      throw new UnexpectedValueError(\"Invalid raw transaction type\");\n  }\n}\n\n// src/serialization/signAndSubmitTransactionRequestArgs.ts\nimport { AccountAuthenticator, TransactionPayload } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload: serializedPayload\n    };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    return {\n      feePayerAuthenticator: bcsSerialize(args.feePayerAuthenticator),\n      rawTxn: serializeRawTransaction(args.rawTxn)\n    };\n  }\n  if (\"rawTxn\" in args) {\n    return {\n      rawTxn: serializeRawTransaction(args.rawTxn)\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignAndSubmitTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(TransactionPayload, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload\n    };\n  }\n  if (\"feePayerAuthenticator\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    const feePayerAuthenticator = bcsDeserialize(AccountAuthenticator, args.feePayerAuthenticator);\n    return {\n      feePayerAuthenticator,\n      rawTxn: deserializedRawTxn\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: deserializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionRequestArgs.ts\nimport { TransactionPayload as TransactionPayload2 } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const serializedPayload = isBcsSerializable(args.payload) ? bcsSerialize(args.payload) : serializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload: serializedPayload\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const serializedRawTxn = serializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: serializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\nfunction deserializeSignTransactionRequestArgs(args) {\n  if (\"payload\" in args) {\n    const payload = typeof args.payload === \"string\" ? bcsDeserialize(TransactionPayload2, args.payload) : deserializeJsonTransactionPayload(args.payload);\n    return {\n      options: args.options,\n      payload\n    };\n  }\n  if (\"rawTxn\" in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return {\n      rawTxn: deserializedRawTxn\n    };\n  }\n  throw new UnexpectedValueError();\n}\n\n// src/serialization/signTransactionResponseArgs.ts\nimport { AccountAuthenticator as AccountAuthenticator2, RawTransaction as RawTransaction2 } from \"@aptos-labs/ts-sdk\";\nfunction serializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsSerialize(args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsSerialize(args.rawTxn);\n    return {\n      accountAuthenticator,\n      rawTxn\n    };\n  }\n  return {\n    accountAuthenticator\n  };\n}\nfunction deserializeSignTransactionResponseArgs(args) {\n  const accountAuthenticator = bcsDeserialize(AccountAuthenticator2, args.accountAuthenticator);\n  if (\"rawTxn\" in args) {\n    const rawTxn = bcsDeserialize(RawTransaction2, args.rawTxn);\n    return {\n      accountAuthenticator,\n      rawTxn\n    };\n  }\n  return {\n    accountAuthenticator\n  };\n}\n\n// src/utils/makeFullMessage.ts\nvar prefix = \"APTOS\";\nfunction makeFullMessage(params, flags) {\n  let fullMessage = prefix;\n  if (flags.address) {\n    fullMessage += `\naddress: ${params.address}`;\n  }\n  if (flags.application) {\n    fullMessage += `\napplication: ${params.application}`;\n  }\n  if (flags.chainId) {\n    fullMessage += `\nchainId: ${params.chainId}`;\n  }\n  fullMessage += `\nmessage: ${params.message}`;\n  fullMessage += `\nnonce: ${params.nonce}`;\n  return {\n    fullMessage,\n    prefix\n  };\n}\nexport { bcsDeserialize, bcsSerialize, deserializeJsonTransactionPayload, deserializeRawTransaction, deserializeSignAndSubmitTransactionRequestArgs, deserializeSignTransactionRequestArgs, deserializeSignTransactionResponseArgs, isBcsSerializable, makeFullMessage, serializeJsonTransactionPayload, serializeRawTransaction, serializeSignAndSubmitTransactionRequestArgs, serializeSignTransactionRequestArgs, serializeSignTransactionResponseArgs };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
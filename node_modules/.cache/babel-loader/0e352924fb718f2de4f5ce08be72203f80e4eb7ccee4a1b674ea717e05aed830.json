{"ast":null,"code":"import { GraphQLClient } from '../classes/GraphQLClient.js';\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport const batchRequests = async (...args) => {\n  const params = parseBatchRequestsArgsExtended(args);\n  const client = new GraphQLClient(params.url);\n  return client.batchRequests(params);\n};\nexport const parseBatchRequestsArgsExtended = args => {\n  if (args.length === 1) {\n    return args[0];\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined\n    };\n  }\n};\nexport const parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n  // eslint-disable-next-line\n  return documentsOrOptions.documents ? documentsOrOptions : {\n    documents: documentsOrOptions,\n    requestHeaders: requestHeaders,\n    signal: undefined\n  };\n};\n//# sourceMappingURL=batchRequests.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
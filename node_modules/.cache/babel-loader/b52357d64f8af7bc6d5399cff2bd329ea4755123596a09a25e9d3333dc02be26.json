{"ast":null,"code":"import { AccountAddress as l, AnyPublicKey as a, Ed25519PublicKey as c, MultiEd25519PublicKey as r, MultiKey as u, Serializable as y, SigningScheme as i } from \"@aptos-labs/ts-sdk\";\nvar d = class o extends y {\n  constructor({\n    address: e,\n    publicKey: n,\n    ansName: t\n  }) {\n    super();\n    this.address = l.from(e), this.publicKey = n, this.ansName = t;\n  }\n  serialize(e) {\n    if (this.address.serialize(e), this.publicKey instanceof c) e.serializeU32AsUleb128(i.Ed25519);else if (this.publicKey instanceof r) e.serializeU32AsUleb128(i.MultiEd25519);else if (this.publicKey instanceof a) e.serializeU32AsUleb128(i.SingleKey);else if (this.publicKey instanceof u) e.serializeU32AsUleb128(i.MultiKey);else throw new Error(\"Unsupported public key\");\n    this.publicKey.serialize(e), e.serializeStr(this.ansName ?? \"\");\n  }\n  static deserialize(e) {\n    let n = l.deserialize(e),\n      t = e.deserializeUleb128AsU32(),\n      s;\n    switch (t) {\n      case i.Ed25519:\n        s = c.deserialize(e);\n        break;\n      case i.MultiEd25519:\n        s = r.deserialize(e);\n        break;\n      case i.SingleKey:\n        s = a.deserialize(e);\n        break;\n      case i.MultiKey:\n        s = u.deserialize(e);\n        break;\n      default:\n        throw new Error(`Unknown variant index for WrappedPublicKey: ${t}`);\n    }\n    let b = e.deserializeStr() || void 0;\n    return new o({\n      address: n,\n      publicKey: s,\n      ansName: b\n    });\n  }\n};\nexport { d as a };\n//# sourceMappingURL=chunk-FFGPGN2W.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
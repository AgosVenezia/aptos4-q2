{"ast":null,"code":"import { a as s } from \"./chunk-Y267I7DC.mjs\";\nimport { a as e, b as n } from \"./chunk-LEKBJ2EG.mjs\";\nvar r = class {\n  constructor(t, i, o, a, c) {\n    this.lastUncommintedNumber = null;\n    this.currentNumber = null;\n    this.lock = !1;\n    this.aptosConfig = t, this.account = i, this.maxWaitTime = o, this.maximumInFlight = a, this.sleepTime = c;\n  }\n  async nextSequenceNumber() {\n    for (; this.lock;) await e(this.sleepTime);\n    this.lock = !0;\n    let t = BigInt(0);\n    try {\n      if ((this.lastUncommintedNumber === null || this.currentNumber === null) && (await this.initialize()), this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight) {\n        await this.update();\n        let i = n();\n        for (; this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight;) await e(this.sleepTime), n() - i > this.maxWaitTime ? (console.warn(`Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`), await this.initialize()) : await this.update();\n      }\n      t = this.currentNumber, this.currentNumber += BigInt(1);\n    } catch (i) {\n      console.error(\"error in getting next sequence number for this account\", i);\n    } finally {\n      this.lock = !1;\n    }\n    return t;\n  }\n  async initialize() {\n    let {\n      sequence_number: t\n    } = await s({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress\n    });\n    this.currentNumber = BigInt(t), this.lastUncommintedNumber = BigInt(t);\n  }\n  async update() {\n    let {\n      sequence_number: t\n    } = await s({\n      aptosConfig: this.aptosConfig,\n      accountAddress: this.account.accountAddress\n    });\n    return this.lastUncommintedNumber = BigInt(t), this.lastUncommintedNumber;\n  }\n  async synchronize() {\n    if (this.lastUncommintedNumber !== this.currentNumber) {\n      for (; this.lock;) await e(this.sleepTime);\n      this.lock = !0;\n      try {\n        await this.update();\n        let t = n();\n        for (; this.lastUncommintedNumber !== this.currentNumber;) n() - t > this.maxWaitTime ? (console.warn(`Waited over 30 seconds for a transaction to commit, re-syncing ${this.account.accountAddress.toString()}`), await this.initialize()) : (await e(this.sleepTime), await this.update());\n      } catch (t) {\n        console.error(\"error in synchronizing this account sequence number with the one on chain\", t);\n      } finally {\n        this.lock = !1;\n      }\n    }\n  }\n};\nexport { r as a };\n//# sourceMappingURL=chunk-ZPQUCT22.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
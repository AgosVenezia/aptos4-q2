{"ast":null,"code":"import { Kind } from 'graphql';\nimport { CONTENT_TYPE_GQL, CONTENT_TYPE_JSON } from '../../lib/http.js';\nimport { isPlainObject } from '../../lib/prelude.js';\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nexport const cleanQuery = str => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\nexport const isGraphQLContentType = contentType => {\n  const contentTypeLower = contentType.toLowerCase();\n  return contentTypeLower.includes(CONTENT_TYPE_GQL) || contentTypeLower.includes(CONTENT_TYPE_JSON);\n};\nexport const parseGraphQLExecutionResult = result => {\n  try {\n    if (Array.isArray(result)) {\n      return {\n        _tag: `Batch`,\n        executionResults: result.map(parseExecutionResult)\n      };\n    } else if (isPlainObject(result)) {\n      return {\n        _tag: `Single`,\n        executionResult: parseExecutionResult(result)\n      };\n    } else {\n      throw new Error(`Invalid execution result: result is not object or array. \\nGot:\\n${String(result)}`);\n    }\n  } catch (e) {\n    return e;\n  }\n};\n/**\n * Example result:\n *\n * ```\n * {\n *  \"data\": null,\n *  \"errors\": [{\n *    \"message\": \"custom error\",\n *    \"locations\": [{ \"line\": 2, \"column\": 3 }],\n *    \"path\": [\"playerNew\"]\n *  }]\n * }\n * ```\n */\nexport const parseExecutionResult = result => {\n  if (typeof result !== `object` || result === null) {\n    throw new Error(`Invalid execution result: result is not object`);\n  }\n  let errors = undefined;\n  let data = undefined;\n  let extensions = undefined;\n  if (`errors` in result) {\n    if (!isPlainObject(result.errors) && !Array.isArray(result.errors)) {\n      throw new Error(`Invalid execution result: errors is not plain object OR array`); // prettier-ignore\n    }\n    errors = result.errors;\n  }\n  // todo add test coverage for case of null. @see https://github.com/jasonkuhrt/graphql-request/issues/739\n  if (`data` in result) {\n    if (!isPlainObject(result.data) && result.data !== null) {\n      throw new Error(`Invalid execution result: data is not plain object`); // prettier-ignore\n    }\n    data = result.data;\n  }\n  if (`extensions` in result) {\n    if (!isPlainObject(result.extensions)) throw new Error(`Invalid execution result: extensions is not plain object`); // prettier-ignore\n    extensions = result.extensions;\n  }\n  return {\n    data,\n    errors,\n    extensions\n  };\n};\nexport const isRequestResultHaveErrors = result => result._tag === `Batch` ? result.executionResults.some(isExecutionResultHaveErrors) : isExecutionResultHaveErrors(result.executionResult);\nexport const isExecutionResultHaveErrors = result => Array.isArray(result.errors) ? result.errors.length > 0 : Boolean(result.errors);\nexport const isOperationDefinitionNode = definition => {\n  return typeof definition === `object` && definition !== null && `kind` in definition && definition.kind === Kind.OPERATION_DEFINITION;\n};\n//# sourceMappingURL=graphql.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
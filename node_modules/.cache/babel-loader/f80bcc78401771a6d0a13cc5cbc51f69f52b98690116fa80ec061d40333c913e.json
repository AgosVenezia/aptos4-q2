{"ast":null,"code":"import { a as o, b as l } from \"./chunk-TPJLAYW6.mjs\";\nimport { a as g } from \"./chunk-IBLZ6MZU.mjs\";\nimport { b as m } from \"./chunk-4OV7QU2U.mjs\";\nimport { a as y } from \"./chunk-PRZ7AIGA.mjs\";\nfunction d(h) {\n  let e = h;\n  return e -= e >> 1 & 1431655765, e = (e & 858993459) + (e >> 2 & 858993459), (e + (e >> 4) & 252645135) * 16843009 >> 24;\n}\nvar p = class h extends m {\n    constructor(e) {\n      super();\n      let {\n        publicKeys: r,\n        signaturesRequired: t\n      } = e;\n      if (t < 1) throw new Error(\"The number of required signatures needs to be greater than 0\");\n      if (r.length < t) throw new Error(`Provided ${r.length} public keys is smaller than the ${t} required signatures`);\n      this.publicKeys = r.map(i => i instanceof o ? i : new o(i)), this.signaturesRequired = t;\n    }\n    verifySignature(e) {\n      throw new Error(\"not implemented\");\n    }\n    authKey() {\n      return y.fromSchemeAndBytes({\n        scheme: 3,\n        input: this.toUint8Array()\n      });\n    }\n    serialize(e) {\n      e.serializeVector(this.publicKeys), e.serializeU8(this.signaturesRequired);\n    }\n    static deserialize(e) {\n      let r = e.deserializeVector(o),\n        t = e.deserializeU8();\n      return new h({\n        publicKeys: r,\n        signaturesRequired: t\n      });\n    }\n    createBitmap(e) {\n      let {\n          bits: r\n        } = e,\n        t = 128,\n        i = new Uint8Array([0, 0, 0, 0]),\n        a = new Set();\n      return r.forEach((n, u) => {\n        if (u + 1 > this.publicKeys.length) throw new Error(`Signature index ${u + 1} is out of public keys range, ${this.publicKeys.length}.`);\n        if (a.has(n)) throw new Error(`Duplicate bit ${n} detected.`);\n        a.add(n);\n        let c = Math.floor(n / 8),\n          b = i[c];\n        b |= t >> n % 8, i[c] = b;\n      }), i;\n    }\n    getIndex(e) {\n      let r = e instanceof o ? e : new o(e),\n        t = this.publicKeys.findIndex(i => i.toString() === r.toString());\n      if (t !== -1) return t;\n      throw new Error(\"Public key not found in MultiKey\");\n    }\n    static isInstance(e) {\n      return \"publicKeys\" in e && \"signaturesRequired\" in e;\n    }\n  },\n  s = class s extends g {\n    constructor(e) {\n      super();\n      let {\n        signatures: r,\n        bitmap: t\n      } = e;\n      if (r.length > s.MAX_SIGNATURES_SUPPORTED) throw new Error(`The number of signatures cannot be greater than ${s.MAX_SIGNATURES_SUPPORTED}`);\n      if (this.signatures = r.map(a => a instanceof l ? a : new l(a)), !(t instanceof Uint8Array)) this.bitmap = s.createBitmap({\n        bits: t\n      });else {\n        if (t.length !== s.BITMAP_LEN) throw new Error(`\"bitmap\" length should be ${s.BITMAP_LEN}`);\n        this.bitmap = t;\n      }\n      let i = this.bitmap.reduce((a, n) => a + d(n), 0);\n      if (i !== this.signatures.length) throw new Error(`Expecting ${i} signatures from the bitmap, but got ${this.signatures.length}`);\n    }\n    static createBitmap(e) {\n      let {\n          bits: r\n        } = e,\n        t = 128,\n        i = new Uint8Array([0, 0, 0, 0]),\n        a = new Set();\n      return r.forEach(n => {\n        if (n >= s.MAX_SIGNATURES_SUPPORTED) throw new Error(`Cannot have a signature larger than ${s.MAX_SIGNATURES_SUPPORTED - 1}.`);\n        if (a.has(n)) throw new Error(\"Duplicate bits detected.\");\n        a.add(n);\n        let u = Math.floor(n / 8),\n          c = i[u];\n        c |= t >> n % 8, i[u] = c;\n      }), i;\n    }\n    serialize(e) {\n      e.serializeVector(this.signatures), e.serializeBytes(this.bitmap);\n    }\n    static deserialize(e) {\n      let r = e.deserializeVector(l),\n        t = e.deserializeBytes();\n      return new s({\n        signatures: r,\n        bitmap: t\n      });\n    }\n  };\ns.BITMAP_LEN = 4, s.MAX_SIGNATURES_SUPPORTED = s.BITMAP_LEN * 8;\nvar f = s;\nexport { p as a, f as b };\n//# sourceMappingURL=chunk-6DMDYBV6.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { b as c } from \"./chunk-KM6UXNC7.mjs\";\nimport { a as o } from \"./chunk-QQIVWB6G.mjs\";\nimport { b as n } from \"./chunk-KFNDDPOW.mjs\";\nimport { sha3_256 as d } from \"@noble/hashes/sha3\";\nvar r = class r extends o {\n  constructor(t) {\n    super();\n    let {\n        data: e\n      } = t,\n      i = n.fromHexInput(e);\n    if (i.toUint8Array().length !== r.LENGTH) throw new Error(`Authentication Key length should be ${r.LENGTH}`);\n    this.data = i;\n  }\n  serialize(t) {\n    t.serializeFixedBytes(this.data.toUint8Array());\n  }\n  static deserialize(t) {\n    let e = t.deserializeFixedBytes(r.LENGTH);\n    return new r({\n      data: e\n    });\n  }\n  toUint8Array() {\n    return this.data.toUint8Array();\n  }\n  static fromSchemeAndBytes(t) {\n    let {\n        scheme: e,\n        input: i\n      } = t,\n      u = n.fromHexInput(i).toUint8Array(),\n      h = new Uint8Array([...u, e]),\n      a = d.create();\n    a.update(h);\n    let y = a.digest();\n    return new r({\n      data: y\n    });\n  }\n  static fromPublicKeyAndScheme(t) {\n    let {\n      publicKey: e\n    } = t;\n    return e.authKey();\n  }\n  static fromPublicKey(t) {\n    let {\n      publicKey: e\n    } = t;\n    return e.authKey();\n  }\n  derivedAddress() {\n    return new c(this.data.toUint8Array());\n  }\n};\nr.LENGTH = 32;\nvar s = r;\nexport { s as a };\n//# sourceMappingURL=chunk-PRZ7AIGA.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
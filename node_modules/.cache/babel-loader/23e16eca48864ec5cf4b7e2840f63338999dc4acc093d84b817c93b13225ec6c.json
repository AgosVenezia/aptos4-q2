{"ast":null,"code":"import { d as p } from \"./chunk-WSZCPSV4.mjs\";\nimport { d as s } from \"./chunk-MK2QAHXC.mjs\";\nimport { a as u, b as y } from \"./chunk-TPJLAYW6.mjs\";\nimport { b as a } from \"./chunk-4VU2ABLU.mjs\";\nimport { c as i } from \"./chunk-P3J54CQG.mjs\";\nimport { b as g } from \"./chunk-KM6UXNC7.mjs\";\nvar h = class c {\n  constructor(e) {\n    this.signingScheme = 2;\n    let {\n      privateKey: r,\n      address: t\n    } = e;\n    this.privateKey = r, this.publicKey = new u(r.publicKey()), this.accountAddress = t ? g.from(t) : this.publicKey.authKey().derivedAddress();\n  }\n  static generate(e = {}) {\n    let {\n        scheme: r = 0\n      } = e,\n      t;\n    switch (r) {\n      case 0:\n        t = i.generate();\n        break;\n      case 2:\n        t = a.generate();\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${r}`);\n    }\n    return new c({\n      privateKey: t\n    });\n  }\n  static fromDerivationPath(e) {\n    let {\n        scheme: r = 0,\n        path: t,\n        mnemonic: o\n      } = e,\n      n;\n    switch (r) {\n      case 0:\n        n = i.fromDerivationPath(t, o);\n        break;\n      case 2:\n        n = a.fromDerivationPath(t, o);\n        break;\n      default:\n        throw new Error(`Unsupported signature scheme ${r}`);\n    }\n    return new c({\n      privateKey: n\n    });\n  }\n  verifySignature(e) {\n    return this.publicKey.verifySignature(e);\n  }\n  signWithAuthenticator(e) {\n    return new s(this.publicKey, this.sign(e));\n  }\n  signTransactionWithAuthenticator(e) {\n    return new s(this.publicKey, this.signTransaction(e));\n  }\n  sign(e) {\n    return new y(this.privateKey.sign(e));\n  }\n  signTransaction(e) {\n    return this.sign(p(e));\n  }\n};\nexport { h as a };\n//# sourceMappingURL=chunk-WZCKSN2U.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
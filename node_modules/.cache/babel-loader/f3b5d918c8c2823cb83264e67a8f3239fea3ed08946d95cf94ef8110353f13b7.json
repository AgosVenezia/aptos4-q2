{"ast":null,"code":"import { b as y } from \"./chunk-KFNDDPOW.mjs\";\nimport { a as U, b, c as f, d as h, e as u, f as c } from \"./chunk-56CNRT2K.mjs\";\nimport { a as s } from \"./chunk-KDMSOCZY.mjs\";\nvar B = class {\n    bcsToBytes() {\n      let e = new n();\n      return this.serialize(e), e.toUint8Array();\n    }\n    bcsToHex() {\n      let e = this.bcsToBytes();\n      return y.fromHexInput(e);\n    }\n    toStringWithoutPrefix() {\n      return this.bcsToHex().toStringWithoutPrefix();\n    }\n    toString() {\n      return `0x${this.toStringWithoutPrefix()}`;\n    }\n  },\n  n = class {\n    constructor(e = 64) {\n      if (e <= 0) throw new Error(\"Length needs to be greater than 0\");\n      this.buffer = new ArrayBuffer(e), this.offset = 0;\n    }\n    ensureBufferWillHandleSize(e) {\n      for (; this.buffer.byteLength < this.offset + e;) {\n        let t = new ArrayBuffer(this.buffer.byteLength * 2);\n        new Uint8Array(t).set(new Uint8Array(this.buffer)), this.buffer = t;\n      }\n    }\n    appendToBuffer(e) {\n      this.ensureBufferWillHandleSize(e.length), new Uint8Array(this.buffer, this.offset).set(e), this.offset += e.length;\n    }\n    serializeWithFunction(e, t, i) {\n      this.ensureBufferWillHandleSize(t);\n      let a = new DataView(this.buffer, this.offset);\n      e.apply(a, [0, i, !0]), this.offset += t;\n    }\n    serializeStr(e) {\n      let t = new TextEncoder();\n      this.serializeBytes(t.encode(e));\n    }\n    serializeBytes(e) {\n      this.serializeU32AsUleb128(e.length), this.appendToBuffer(e);\n    }\n    serializeFixedBytes(e) {\n      this.appendToBuffer(e);\n    }\n    serializeBool(e) {\n      p(e);\n      let t = e ? 1 : 0;\n      this.appendToBuffer(new Uint8Array([t]));\n    }\n    serializeU8(e) {\n      this.appendToBuffer(new Uint8Array([e]));\n    }\n    serializeU16(e) {\n      this.serializeWithFunction(DataView.prototype.setUint16, 2, e);\n    }\n    serializeU32(e) {\n      this.serializeWithFunction(DataView.prototype.setUint32, 4, e);\n    }\n    serializeU64(e) {\n      let t = BigInt(e) & BigInt(f),\n        i = BigInt(e) >> BigInt(32);\n      this.serializeU32(Number(t)), this.serializeU32(Number(i));\n    }\n    serializeU128(e) {\n      let t = BigInt(e) & h,\n        i = BigInt(e) >> BigInt(64);\n      this.serializeU64(t), this.serializeU64(i);\n    }\n    serializeU256(e) {\n      let t = BigInt(e) & u,\n        i = BigInt(e) >> BigInt(128);\n      this.serializeU128(t), this.serializeU128(i);\n    }\n    serializeU32AsUleb128(e) {\n      let t = e,\n        i = [];\n      for (; t >>> 7;) i.push(t & 127 | 128), t >>>= 7;\n      i.push(t), this.appendToBuffer(new Uint8Array(i));\n    }\n    toUint8Array() {\n      return new Uint8Array(this.buffer).slice(0, this.offset);\n    }\n    serialize(e) {\n      e.serialize(this);\n    }\n    serializeVector(e) {\n      this.serializeU32AsUleb128(e.length), e.forEach(t => {\n        t.serialize(this);\n      });\n    }\n    serializeOption(e) {\n      let t = e !== void 0;\n      this.serializeBool(t), t && e.serialize(this);\n    }\n    serializeOptionStr(e) {\n      e === void 0 ? this.serializeU32AsUleb128(0) : (this.serializeU32AsUleb128(1), this.serializeStr(e));\n    }\n  };\ns([o(0, U)], n.prototype, \"serializeU8\", 1), s([o(0, b)], n.prototype, \"serializeU16\", 1), s([o(0, f)], n.prototype, \"serializeU32\", 1), s([o(BigInt(0), h)], n.prototype, \"serializeU64\", 1), s([o(BigInt(0), u)], n.prototype, \"serializeU128\", 1), s([o(BigInt(0), c)], n.prototype, \"serializeU256\", 1), s([o(0, f)], n.prototype, \"serializeU32AsUleb128\", 1);\nfunction p(r) {\n  if (typeof r != \"boolean\") throw new Error(`${r} is not a boolean value`);\n}\nvar A = (r, e, t) => `${r} is out of range: [${e}, ${t}]`;\nfunction z(r, e, t) {\n  let i = BigInt(r);\n  if (i > BigInt(t) || i < BigInt(e)) throw new Error(A(r, e, t));\n}\nfunction o(r, e) {\n  return (t, i, a) => {\n    let g = a.value;\n    return a.value = function (l) {\n      return z(l, r, e), g.apply(this, [l]);\n    }, a;\n  };\n}\nexport { B as a, n as b, p as c, A as d, z as e };\n//# sourceMappingURL=chunk-QQIVWB6G.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
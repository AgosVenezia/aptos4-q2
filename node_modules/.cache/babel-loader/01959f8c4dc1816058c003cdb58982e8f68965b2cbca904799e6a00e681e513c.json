{"ast":null,"code":"import { a as d } from \"./chunk-YZ5BCOGI.mjs\";\nimport { a as y, b as l, c as C, d as T, e as O, f as h, g as L, h as P, i as S, j as V, k as b, l as R, n as w, o as I, p as v, q as k } from \"./chunk-Y267I7DC.mjs\";\nimport { a as o } from \"./chunk-BG2TZI3H.mjs\";\nimport { a as f } from \"./chunk-PCLU4KLY.mjs\";\nimport { a as p } from \"./chunk-HBIDHQ2M.mjs\";\nimport { e as u, f as A } from \"./chunk-J245N3XF.mjs\";\nimport { b as r } from \"./chunk-KM6UXNC7.mjs\";\nimport { g, h as m } from \"./chunk-LEKBJ2EG.mjs\";\nvar M = class {\n  constructor(e) {\n    this.config = e;\n  }\n  async getAccountInfo(e) {\n    return y({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountModules(e) {\n    return l({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountModule(e) {\n    return C({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTransactions(e) {\n    return T({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountResources(e) {\n    return O({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountResource(e) {\n    return h({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async lookupOriginalAccountAddress(e) {\n    return L({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTokensCount(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"account_transactions_processor\"\n    }), P({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountOwnedTokens(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), S({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountOwnedTokensFromCollectionAddress(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), V({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCollectionsWithOwnedTokens(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"token_v2_processor\"\n    }), b({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountTransactionsCount(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"account_transactions_processor\"\n    }), R({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCoinsData(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), w({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountCoinsCount(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"fungible_asset_processor\"\n    }), I({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async getAccountAPTAmount(e) {\n    return this.getAccountCoinAmount({\n      coinType: u,\n      faMetadataAddress: A,\n      ...e\n    });\n  }\n  async getAccountCoinAmount(e) {\n    let {\n      accountAddress: a,\n      coinType: s,\n      faMetadataAddress: t,\n      minimumLedgerVersion: N\n    } = e;\n    N && console.warn(`minimumLedgerVersion is not used anymore, here for backward \n        compatibility see https://github.com/aptos-labs/aptos-ts-sdk/pull/519, \n        will be removed in the near future`);\n    let c = s;\n    s === void 0 && t !== void 0 && (c = await p(async () => {\n      try {\n        let n = (await d({\n          aptosConfig: this.config,\n          payload: {\n            function: \"0x1::coin::paired_coin\",\n            functionArguments: [t]\n          }\n        })).at(0);\n        if (n.vec.length > 0 && m(n.vec[0])) return g(n.vec[0]);\n      } catch {}\n    }, `coin-mapping-${t.toString()}`, 1e3 * 60 * 5)());\n    let i;\n    if (s !== void 0 && t !== void 0) i = r.from(t).toStringLong();else if (s !== void 0 && t === void 0) s === u ? i = r.A.toStringLong() : i = f(r.A, s).toStringLong();else if (s === void 0 && t !== void 0) {\n      let n = r.from(t);\n      i = n.toStringLong(), n === r.A && (c = u);\n    } else throw new Error(\"Either coinType, faMetadataAddress, or both must be provided\");\n    if (c !== void 0) {\n      let [n] = await d({\n        aptosConfig: this.config,\n        payload: {\n          function: \"0x1::coin::balance\",\n          typeArguments: [c],\n          functionArguments: [a]\n        }\n      });\n      return parseInt(n, 10);\n    }\n    let [E] = await d({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::primary_fungible_store::balance\",\n        typeArguments: [\"0x1::object::ObjectCore\"],\n        functionArguments: [a, i]\n      }\n    });\n    return parseInt(E, 10);\n  }\n  async getAccountOwnedObjects(e) {\n    return await o({\n      config: this.config,\n      minimumLedgerVersion: e.minimumLedgerVersion,\n      processorType: \"default_processor\"\n    }), v({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n  async deriveAccountFromPrivateKey(e) {\n    return k({\n      aptosConfig: this.config,\n      ...e\n    });\n  }\n};\nexport { M as a };\n//# sourceMappingURL=chunk-HM5HITUC.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
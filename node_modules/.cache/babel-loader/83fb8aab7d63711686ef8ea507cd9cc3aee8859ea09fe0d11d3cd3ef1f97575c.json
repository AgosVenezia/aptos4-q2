{"ast":null,"code":"import { a as b } from \"./chunk-IBLZ6MZU.mjs\";\nimport { a as g } from \"./chunk-KIW54KWR.mjs\";\nimport { b as S } from \"./chunk-4OV7QU2U.mjs\";\nimport { d as K, f as A, g as v, h as E, i as H, j as P } from \"./chunk-PHP47DI4.mjs\";\nimport { a as p } from \"./chunk-PRZ7AIGA.mjs\";\nimport { a as f } from \"./chunk-QQIVWB6G.mjs\";\nimport { b as s } from \"./chunk-KFNDDPOW.mjs\";\nimport { ed25519 as y } from \"@noble/curves/ed25519\";\nvar d = [237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16];\nfunction w(z) {\n  let e = z.toUint8Array().slice(32);\n  for (let t = d.length - 1; t >= 0; t -= 1) {\n    if (e[t] < d[t]) return !0;\n    if (e[t] > d[t]) return !1;\n  }\n  return !1;\n}\nvar i = class i extends S {\n  constructor(e) {\n    super();\n    let t = s.fromHexInput(e);\n    if (t.toUint8Array().length !== i.LENGTH) throw new Error(`PublicKey length should be ${i.LENGTH}`);\n    this.key = t;\n  }\n  verifySignature(e) {\n    let {\n      message: t,\n      signature: n\n    } = e;\n    if (!w(n)) return !1;\n    let o = g(t),\n      c = s.fromHexInput(o).toUint8Array(),\n      u = n.toUint8Array(),\n      l = this.key.toUint8Array();\n    return y.verify(u, c, l);\n  }\n  authKey() {\n    return p.fromSchemeAndBytes({\n      scheme: 0,\n      input: this.toUint8Array()\n    });\n  }\n  toUint8Array() {\n    return this.key.toUint8Array();\n  }\n  serialize(e) {\n    e.serializeBytes(this.key.toUint8Array());\n  }\n  static deserialize(e) {\n    let t = e.deserializeBytes();\n    return new i(t);\n  }\n  static isPublicKey(e) {\n    return e instanceof i;\n  }\n  static isInstance(e) {\n    return \"key\" in e && e.key?.data?.length === i.LENGTH;\n  }\n};\ni.LENGTH = 32;\nvar m = i,\n  r = class r extends f {\n    constructor(e) {\n      super();\n      let t = s.fromHexInput(e);\n      if (t.toUint8Array().length !== r.LENGTH) throw new Error(`PrivateKey length should be ${r.LENGTH}`);\n      this.signingKey = t;\n    }\n    static generate() {\n      let e = y.utils.randomPrivateKey();\n      return new r(e);\n    }\n    static fromDerivationPath(e, t) {\n      if (!A(e)) throw new Error(`Invalid derivation path ${e}`);\n      return r.fromDerivationPathInner(e, P(t));\n    }\n    static fromDerivationPathInner(e, t, n = K) {\n      let {\n          key: o,\n          chainCode: c\n        } = v(r.SLIP_0010_SEED, t),\n        u = H(e).map(x => parseInt(x, 10)),\n        {\n          key: l\n        } = u.reduce((x, I) => E(x, I + n), {\n          key: o,\n          chainCode: c\n        });\n      return new r(l);\n    }\n    publicKey() {\n      let e = y.getPublicKey(this.signingKey.toUint8Array());\n      return new m(e);\n    }\n    sign(e) {\n      let t = g(e),\n        n = s.fromHexInput(t).toUint8Array(),\n        o = y.sign(n, this.signingKey.toUint8Array());\n      return new h(o);\n    }\n    toUint8Array() {\n      return this.signingKey.toUint8Array();\n    }\n    toString() {\n      return this.signingKey.toString();\n    }\n    serialize(e) {\n      e.serializeBytes(this.toUint8Array());\n    }\n    static deserialize(e) {\n      let t = e.deserializeBytes();\n      return new r(t);\n    }\n    static isPrivateKey(e) {\n      return e instanceof r;\n    }\n  };\nr.LENGTH = 32, r.SLIP_0010_SEED = \"ed25519 seed\";\nvar U = r,\n  a = class a extends b {\n    constructor(e) {\n      super();\n      let t = s.fromHexInput(e);\n      if (t.toUint8Array().length !== a.LENGTH) throw new Error(`Signature length should be ${a.LENGTH}`);\n      this.data = t;\n    }\n    toUint8Array() {\n      return this.data.toUint8Array();\n    }\n    serialize(e) {\n      e.serializeBytes(this.data.toUint8Array());\n    }\n    static deserialize(e) {\n      let t = e.deserializeBytes();\n      return new a(t);\n    }\n  };\na.LENGTH = 64;\nvar h = a;\nexport { w as a, m as b, U as c, h as d };\n//# sourceMappingURL=chunk-P3J54CQG.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
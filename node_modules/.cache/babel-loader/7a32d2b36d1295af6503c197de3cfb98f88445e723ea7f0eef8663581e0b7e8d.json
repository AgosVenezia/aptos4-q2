{"ast":null,"code":"import { c as r } from \"./chunk-56CNRT2K.mjs\";\nvar n = class {\n  constructor(e) {\n    this.buffer = new ArrayBuffer(e.length), new Uint8Array(this.buffer).set(e, 0), this.offset = 0;\n  }\n  read(e) {\n    if (this.offset + e > this.buffer.byteLength) throw new Error(\"Reached to the end of buffer\");\n    let i = this.buffer.slice(this.offset, this.offset + e);\n    return this.offset += e, i;\n  }\n  remaining() {\n    return this.buffer.byteLength - this.offset;\n  }\n  deserializeStr() {\n    let e = this.deserializeBytes();\n    return new TextDecoder().decode(e);\n  }\n  deserializeOptionStr() {\n    return this.deserializeBool() ? this.deserializeStr() : void 0;\n  }\n  deserializeOption(e) {\n    return this.deserializeBool() ? this.deserialize(e) : void 0;\n  }\n  deserializeBytes() {\n    let e = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(e));\n  }\n  deserializeFixedBytes(e) {\n    return new Uint8Array(this.read(e));\n  }\n  deserializeBool() {\n    let e = new Uint8Array(this.read(1))[0];\n    if (e !== 1 && e !== 0) throw new Error(\"Invalid boolean value\");\n    return e === 1;\n  }\n  deserializeU8() {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n  deserializeU16() {\n    return new DataView(this.read(2)).getUint16(0, !0);\n  }\n  deserializeU32() {\n    return new DataView(this.read(4)).getUint32(0, !0);\n  }\n  deserializeU64() {\n    let e = this.deserializeU32(),\n      i = this.deserializeU32();\n    return BigInt(BigInt(i) << BigInt(32) | BigInt(e));\n  }\n  deserializeU128() {\n    let e = this.deserializeU64(),\n      i = this.deserializeU64();\n    return BigInt(i << BigInt(64) | e);\n  }\n  deserializeU256() {\n    let e = this.deserializeU128(),\n      i = this.deserializeU128();\n    return BigInt(i << BigInt(128) | e);\n  }\n  deserializeUleb128AsU32() {\n    let e = BigInt(0),\n      i = 0;\n    for (; e < r;) {\n      let t = this.deserializeU8();\n      if (e |= BigInt(t & 127) << BigInt(i), !(t & 128)) break;\n      i += 7;\n    }\n    if (e > r) throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    return Number(e);\n  }\n  deserialize(e) {\n    return e.deserialize(this);\n  }\n  deserializeVector(e) {\n    let i = this.deserializeUleb128AsU32(),\n      t = new Array();\n    for (let s = 0; s < i; s += 1) t.push(this.deserialize(e));\n    return t;\n  }\n};\nexport { n as a };\n//# sourceMappingURL=chunk-N47FTRYO.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}